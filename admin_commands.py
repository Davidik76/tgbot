import logging
from datetime import datetime
from typing import List, Dict

from aiogram import Bot, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_ID
from database import Database
from chat_analyzer import ChatAnalyzer

logger = logging.getLogger(__name__)

class AdminCommands:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot: Bot, db: Database, analyzer: ChatAnalyzer):
        self.bot = bot
        self.db = db
        self.analyzer = analyzer
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == ADMIN_ID
    
    async def stats_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not self.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            stats = await self.db.get_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —á–∞—Ç–æ–≤ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            all_chats = await self.db.get_all_chats()
            top_chats = all_chats[:5]
            
            text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            text += f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: <b>{stats['total_chats']}</b>\n"
            text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π: <b>{stats['total_rewards']:.2f}</b>\n"
            text += f"üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —á–∞—Ç–∞: <b>{stats['avg_chat_value']:.2f}</b>\n\n"
            
            if top_chats:
                text += "üèÜ <b>–¢–æ–ø-5 —á–∞—Ç–æ–≤ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                for i, chat in enumerate(top_chats, 1):
                    date = datetime.fromisoformat(chat['added_date']).strftime("%d.%m.%Y")
                    text += f"{i}. <b>{chat['title']}</b>\n"
                    text += f"   üíé –¶–µ–Ω–Ω–æ—Å—Ç—å: {chat['value']:.2f}\n"
                    text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat['member_count']}\n"
                    text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {date}\n\n"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def chats_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /chats - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        if not self.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            all_chats = await self.db.get_all_chats()
            
            if not all_chats:
                await message.answer("üì≠ –ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="refresh_chats"
            ))
            
            text = f"üí¨ <b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ ({len(all_chats)})</b>\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤
            for i, chat in enumerate(all_chats[:10], 1):
                date = datetime.fromisoformat(chat['added_date']).strftime("%d.%m.%Y")
                last_activity = datetime.fromisoformat(chat['last_activity_date']).strftime("%d.%m %H:%M") if chat['last_activity_date'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                text += f"{i}. <b>{chat['title']}</b>\n"
                text += f"   üíé –¶–µ–Ω–Ω–æ—Å—Ç—å: {chat['value']:.2f}\n"
                text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat['member_count']}\n"
                text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {date}\n"
                text += f"   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            
            if len(all_chats) > 10:
                text += f"... –∏ –µ—â–µ {len(all_chats) - 10} —á–∞—Ç–æ–≤"
            
            await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.")
    
    async def rewards_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /rewards - —Å–ø–∏—Å–æ–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π"""
        if not self.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            all_rewards = await self.db.get_user_rewards()
            
            if not all_rewards:
                await message.answer("üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_amount = sum(reward['reward_amount'] for reward in all_rewards)
            unique_users = len(set(reward['user_id'] for reward in all_rewards))
            unique_chats = len(set(reward['chat_id'] for reward in all_rewards))
            
            text = f"üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π</b>\n\n"
            text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount:.2f}</b>\n"
            text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{unique_users}</b>\n"
            text += f"üí¨ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: <b>{unique_chats}</b>\n"
            text += f"üìä –í—Å–µ–≥–æ –≤—ã–¥–∞—á: <b>{len(all_rewards)}</b>\n\n"
            
            text += "üèÜ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π:</b>\n"
            for reward in all_rewards[:10]:
                date = datetime.fromisoformat(reward['reward_date']).strftime("%d.%m %H:%M")
                text += f"‚Ä¢ <b>{reward['reward_amount']:.2f}</b> - {reward['chat_title']}\n"
                text += f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reward['user_id']}\n"
                text += f"  üìÖ {date}\n\n"
            
            if len(all_rewards) > 10:
                text += f"... –∏ –µ—â–µ {len(all_rewards) - 10} –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.")
    
    async def analyze_chat_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /analyze_chat - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if not self.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            command_parts = message.text.split()
            if len(command_parts) < 2:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze_chat <chat_id>")
                return
            
            try:
                chat_id = int(command_parts[1])
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            stats = await self.db.get_chat_stats(chat_id)
            
            if stats['active_users'] == 0 and stats['total_messages'] == 0:
                await message.answer(f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
            chat_value = self.analyzer.calculate_chat_value(stats)
            health_analysis = self.analyzer.analyze_chat_health(stats)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            all_chats = await self.db.get_all_chats()
            chat_info = next((chat for chat in all_chats if chat['chat_id'] == chat_id), None)
            
            text = f"üîç <b>–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ {chat_id}</b>\n\n"
            
            if chat_info:
                text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{chat_info['title']}</b>\n"
                text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{chat_info['member_count']}</b>\n"
                text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: <b>{datetime.fromisoformat(chat_info['added_date']).strftime('%d.%m.%Y')}</b>\n\n"
            
            text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:</b>\n"
            text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['active_users']}</b>\n"
            text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: <b>{stats['total_messages']}</b>\n"
            text += f"üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: <b>{health_analysis['engagement_ratio']}</b>\n"
            text += f"üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{health_analysis['activity_ratio']:.1%}</b>\n\n"
            
            text += f"üíé <b>–û—Ü–µ–Ω–∫–∞:</b>\n"
            text += f"–¶–µ–Ω–Ω–æ—Å—Ç—å —á–∞—Ç–∞: <b>{chat_value:.2f}</b>\n"
            text += f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: <b>{health_analysis['engagement_level']}</b>\n"
            text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è: <b>{health_analysis['health_status']}</b>\n"
            text += f"–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: <b>{health_analysis['health_score']}/100</b>\n\n"
            
            text += f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for recommendation in health_analysis['recommendations']:
                text += f"‚Ä¢ {recommendation}\n"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞.")
    
    async def user_rewards_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /user_rewards - –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            command_parts = message.text.split()
            if len(command_parts) < 2:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_rewards <user_id>")
                return
            
            try:
                user_id = int(command_parts[1])
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_rewards = await self.db.get_user_rewards(user_id)
            
            if not user_rewards:
                await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.")
                return
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
            total_amount = sum(reward['reward_amount'] for reward in user_rewards)
            
            text = f"üí∞ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
            text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount:.2f}</b>\n"
            text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞—á: <b>{len(user_rewards)}</b>\n\n"
            
            text += "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π:</b>\n"
            for reward in user_rewards[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15
                date = datetime.fromisoformat(reward['reward_date']).strftime("%d.%m.%Y %H:%M")
                text += f"‚Ä¢ <b>{reward['reward_amount']:.2f}</b> - {reward['chat_title']}\n"
                text += f"  üìÖ {date}\n\n"
            
            if len(user_rewards) > 15:
                text += f"... –∏ –µ—â–µ {len(user_rewards) - 15} –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def help_admin_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /admin_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º"""
        if not self.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        help_text = (
            "üõ† <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            "/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/chats - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤\n"
            "/rewards - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π\n\n"
            "<b>–ê–Ω–∞–ª–∏–∑:</b>\n"
            "/analyze_chat <chat_id> - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞\n"
            "/user_rewards <user_id> - –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "<b>–°–ø—Ä–∞–≤–∫–∞:</b>\n"
            "/admin_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )
        
        await message.answer(help_text, parse_mode="HTML")