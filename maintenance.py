#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""

import asyncio
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

from utils import BotUtils
from database import Database
from config import DATABASE_PATH

async def cleanup_old_data(days: int = 7):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    utils = BotUtils()
    deleted_count = await utils.cleanup_old_activity(days)
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    return deleted_count

async def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    utils = BotUtils()
    backup_path = await utils.backup_database()
    
    if backup_path:
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    return backup_path

async def optimize_database():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    utils = BotUtils()
    success = await utils.optimize_database()
    
    if success:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    return success

async def export_data():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    print("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    
    utils = BotUtils()
    success = await utils.export_data_to_csv()
    
    if success:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É exports/")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    return success

async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
    
    utils = BotUtils()
    health = await utils.health_check()
    
    print(f"üìä –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –ó–¥–æ—Ä–æ–≤–æ' if health['overall_health'] else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if health['database_accessible'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
    print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {'‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—Ç' if health['tables_exist'] else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
    print(f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ –ï—Å—Ç—å' if health['recent_activity'] else '‚ùå –ù–µ—Ç'}")
    
    if health['errors']:
        print("‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
        for error in health['errors']:
            print(f"   ‚Ä¢ {error}")
    
    return health['overall_health']

async def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    utils = BotUtils()
    stats = await utils.get_database_stats()
    
    if stats:
        print(f"üìÅ –†–∞–∑–º–µ—Ä –ë–î: {utils.format_file_size(stats['file_size'])}")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}")
        print(f"üí¨ –ß–∞—Ç–æ–≤: {stats.get('chats_count', 0)}")
        print(f"üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π: {stats.get('rewards_count', 0)}")
        print(f"üìù –ó–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats.get('chat_activity_count', 0)}")
        
        if stats.get('first_user_date'):
            print(f"üìÖ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {stats['first_user_date']}")
        if stats.get('last_user_date'):
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {stats['last_user_date']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è Reward Bot")
    parser.add_argument('action', choices=[
        'cleanup', 'backup', 'optimize', 'export', 'health', 'stats', 'all'
    ], help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--days', type=int, default=7, 
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)')
    
    args = parser.parse_args()
    
    async def run_action():
        try:
            if args.action == 'cleanup':
                await cleanup_old_data(args.days)
            elif args.action == 'backup':
                await create_backup()
            elif args.action == 'optimize':
                await optimize_database()
            elif args.action == 'export':
                await export_data()
            elif args.action == 'health':
                await health_check()
            elif args.action == 'stats':
                await show_stats()
            elif args.action == 'all':
                print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
                await health_check()
                await create_backup()
                await cleanup_old_data(args.days)
                await optimize_database()
                await show_stats()
                print("‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            sys.exit(1)
    
    try:
        asyncio.run(run_action())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()