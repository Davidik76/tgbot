#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Reward Bot –±–µ–∑ aiogram
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List

from database import Database
from chat_analyzer import ChatAnalyzer
from utils import BotUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DemoBot:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db = Database()
        self.analyzer = ChatAnalyzer()
        self.utils = BotUtils(self.db)
    
    async def demo_workflow(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Reward Bot\n")
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await self.db.init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        test_users = [
            (1147574990, "admin_user"),
            (123456789, "test_user_1"),
            (987654321, "test_user_2"),
            (555666777, "test_user_3")
        ]
        
        for user_id, username in test_users:
            await self.db.add_user(user_id, username)
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω")
        print()
        
        # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        print("3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤...")
        test_chats = [
            (-1001234567890, "–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 1147574990),
            (-1001234567891, "–ß–∞—Ç —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", 123456789),
            (-1001234567892, "–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç", 987654321)
        ]
        
        for chat_id, title, added_by in test_chats:
            await self.db.add_chat(chat_id, title, added_by)
            print(f"   ‚úÖ –ß–∞—Ç '{title}' ({chat_id}) –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {added_by}")
        print()
        
        # 4. –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–∞—Ö
        print("4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–∞—Ö...")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç - –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        active_chat = -1001234567890
        for i in range(50):
            user_id = test_users[i % len(test_users)][0]
            await self.db.update_chat_activity(active_chat, user_id)
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: 50 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {len(test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ß–∞—Ç —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        low_activity_chat = -1001234567891
        for i in range(5):
            user_id = test_users[i % 2][0]  # –¢–æ–ª—å–∫–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.update_chat_activity(low_activity_chat, user_id)
        print(f"   ‚úÖ –ß–∞—Ç —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: 5 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        very_active_chat = -1001234567892
        for i in range(100):
            user_id = test_users[i % len(test_users)][0]
            await self.db.update_chat_activity(very_active_chat, user_id)
        print(f"   ‚úÖ –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: 100 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {len(test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print()
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤
        print("5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤...")
        for chat_id, title, _ in test_chats:
            stats = await self.db.get_chat_stats(chat_id)
            value = self.analyzer.calculate_chat_value(stats)
            health = self.analyzer.analyze_chat_health(stats)
            
            await self.db.update_chat_value(chat_id, value)
            
            print(f"   üìä –ß–∞—Ç: {title}")
            print(f"      üíé –¶–µ–Ω–Ω–æ—Å—Ç—å: {value:.2f}")
            print(f"      üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
            print(f"      üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
            print(f"      üè• –ó–¥–æ—Ä–æ–≤—å–µ: {health['health_status']} ({health['health_score']}/100)")
            print(f"      üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {health['engagement_level']}")
            print()
        
        # 6. –í—ã–¥–∞—á–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
        print("6Ô∏è‚É£ –í—ã–¥–∞—á–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π...")
        for chat_id, title, added_by in test_chats:
            stats = await self.db.get_chat_stats(chat_id)
            value = self.analyzer.calculate_chat_value(stats)
            reward_amount = value * 0.1  # 10% –æ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            
            if reward_amount > 0:
                await self.db.add_reward(added_by, chat_id, reward_amount)
                print(f"   üí∞ {added_by}: {reward_amount:.2f} –∑–∞ —á–∞—Ç '{title}'")
        print()
        
        # 7. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("7Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        stats = await self.db.get_stats()
        print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
        print(f"   üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {stats['total_chats']}")
        print(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π: {stats['total_rewards']:.2f}")
        print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —á–∞—Ç–∞: {stats['avg_chat_value']:.2f}")
        print()
        
        # 8. –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("8Ô∏è‚É£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        for user_id, username in test_users:
            rewards = await self.db.get_user_rewards(user_id)
            if rewards:
                total = sum(r['reward_amount'] for r in rewards)
                print(f"   üë§ {username} ({user_id}): {total:.2f} ({len(rewards)} –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π)")
        print()
        
        # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        print("9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        health = await self.utils.health_check()
        print(f"   üè• –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –ó–¥–æ—Ä–æ–≤–æ' if health['overall_health'] else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")
        print(f"   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if health['database_accessible'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        print(f"   üìã –¢–∞–±–ª–∏—Ü—ã: {'‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—Ç' if health['tables_exist'] else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
        print(f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ –ï—Å—Ç—å' if health['recent_activity'] else '‚ùå –ù–µ—Ç'}")
        print()
        
        # 10. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        print("üîü –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        success = await self.utils.export_data_to_csv("demo_exports")
        if success:
            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É demo_exports/")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤")
        print("   ‚Ä¢ –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤")
        print("   ‚Ä¢ –í—ã–¥–∞—á–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π")
        print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ aiogram —Å Python 3.11/3.12")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        demo = DemoBot()
        await demo.demo_workflow()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())